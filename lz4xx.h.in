#ifndef LZ4XX_H
#define LZ4XX_H

#ifdef _WIN32
#   define LZ4XX_EXPORT __declspec(dllexport)
#else
#   define LZ4XX_EXPORT
#endif

#include <functional>
#include <stdint.h>
#include <vector>
#include <string>

#cmakedefine ENABLE_BIO_SUPPORT
#ifndef ENABLE_BIO_SUPPORT
  #define NO_BIO_SUPPORT
#endif

#ifndef NO_BIO_SUPPORT
#include "bio/bio.hpp"
#endif

#define LZ4xx_VERSION "@PROJECT_VERSION@"

namespace lz4xx
{

#ifndef NO_BIO_SUPPORT
using namespace ck::bio;
using reader_buffer = reader<Buffer>;
using reader_stream = reader<Stream>;
using writer_buffer = writer<Buffer>;
using writer_stream = writer<Stream>;
#endif

enum Mode
{
    Compress,
    Decompress
};

enum BlockMode
{
    BM_Linked,
    BM_Independent,
};

enum BlockSize
{
    BS_Default,
    BS_Max64KB,
    BS_Max256KB,
    BS_Max1MB,
    BS_Max4MB,
};

// @param chunk: the index of chunk
// @param value: the progress value(1/100)
using buffer_t = std::vector<uint8_t>;
struct LZ4XX_EXPORT progress{
    using cb = std::function<void(int chunk,float value)>;
    progress();
    progress(const cb& cb);
    void attach(const cb& cb);
    void set(int chunk,float value);

    std::string last_error; // set when compress/decompress got error
private:
    cb _cb;
};

template<Mode M>
using is_compress = typename std::enable_if<M == Compress,int>::type;

template<Mode M>
using is_decompress = typename std::enable_if<M == Decompress,int>::type;

struct preferences {
    struct {
        bool        checksumContent = false;    // true: add a 32-bit checksum of frame's decompressed data
        bool        checksumBlock   = false;    // true: each block followed by a checksum of block's compressed data
        BlockSize   blockSize       = BS_Max64KB;
        BlockMode   blockMode       = BM_Linked;
    } frame;

    uint32_t        level           = 9;        // compression level 1~s16
    bool            autoFlush       = false;    // true: always flush; reduces usage of internal buffers
    bool            favorDecSpeed   = false;    // i want decompress faster
};

////////////////////////////////////////////////////////
/// context
template<Mode MO>
class LZ4XX_EXPORT context
{
public:
    struct prv;
private:
    context(prv*);
    context(const context&) = delete;
public:
    context();
    context(context&&);
    ~context();

    bool update(const uint8_t* data, size_t size);

    bool finish();

    // when "update" return false, if you want restart, please call this first
    void reset();

    const std::string& lasterror() const;

    context& operator=(context&&);
private:
    prv* d = nullptr;

#ifdef CK_BIO_HPP
    friend context<Compress> compress(size_t,iwriter&,const preferences&);
    friend context<Decompress> decompress(iwriter&);
#endif
};

////////////////////////////////////////////////////////
/// Funtions
#ifdef CK_BIO_HPP
LZ4XX_EXPORT context<Compress>
compress(
    size_t contentSize,
    iwriter& wt,
    const preferences& = {}
    );

LZ4XX_EXPORT bool
compress(
    ireader& rd,
    iwriter& wt,
    progress* pgs = nullptr,
    const preferences& = {}
    );

LZ4XX_EXPORT context<Decompress>
decompress(
    iwriter& wt
    );

LZ4XX_EXPORT bool
decompress(
    ireader& rd,
    iwriter& wt,
    progress* pgs = nullptr
    );
#endif

}

#endif // LZ4XX_H


